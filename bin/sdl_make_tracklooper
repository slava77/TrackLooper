#!/bin/bash

##############################################################################
#
#
# Line Segment Tracking Standalone Code Make Script
#
#
##############################################################################

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Help
usage()
{
  echo "ERROR - Usage:"
  echo
  echo "      sh $(basename $0) OPTIONSTRINGS ..."
  echo
  echo "Options:"
  echo "  -h    Help                      (Display this message)"
  echo "  -c    cache                     (Make library with cache enabled)"
  echo "  -s    show log                  (Full compilation script to stdout)"
  echo "  -m    make clean binaries       (Make clean binaries before remake. e.g. when header files changed in SDL/*.h)"
  echo "  -d    cut value ntuple          (With extra variables in a debug ntuple file)"
  echo "  -p    primitive object ntuple   (With extra variables related to primitive objects)"
  echo "  -3    TC pLS triplets           (Allow triplet pLSs in TC collection)"
  echo "  -N    neural networks           (Toggle LST neural networks)"
  echo "  -G    GPU (CUDA) backend        (Compile only for CUDA, takes priority over -C)"
  echo "  -C    CPU serial backend        (Compile only for CPU)"
  echo "  -P    PT Cut Value              (In GeV, Default is 0.8, Works only for standalone version of code)"
  echo "  -w    Warning mode              (Print extra warning outputs)"
  echo "  -2    no pLS duplicate cleaning (Don't perform the pLS duplicate cleaning step)"
  echo
  exit
}

# Parsing command-line opts
while getopts ":cxgsmdp3NGC2ehwP:" OPTION; do
  case $OPTION in
    c) MAKECACHE=true;;
    s) SHOWLOG=true;;
    m) MAKECLEANBINARIES=true;;
    d) MAKECUTVALUES=true;;
    p) PRIMITIVE=true;;
    3) TCPLSTRIPLETS=true;;
    N) DONTUSENN=true;;
    G) ONLYCUDABACKEND=true;;
    C) ONLYCPUBACKEND=true;;
    2) NOPLSDUPCLEAN=true;;
    w) PRINTWARNINGS=true;;
    P) PTCUTVALUE=$OPTARG;;
    h) usage;;
    :) usage;;
  esac
done

# If the command line options are not provided set it to default value of false
if [ -z ${MAKECACHE} ]; then MAKECACHE=false; fi
if [ -z ${SHOWLOG} ]; then SHOWLOG=false; fi
if [ -z ${MAKECLEANBINARIES} ]; then MAKECLEANBINARIES=false; fi
if [ -z ${MAKECUTVALUES} ]; then MAKECUTVALUES=false; fi
if [ -z ${PRIMITIVE} ]; then PRIMITIVE=false; fi
if [ -z ${TCPLSTRIPLETS} ]; then TCPLSTRIPLETS=false; fi
if [ -z ${DONTUSENN} ]; then DONTUSENN=false; fi
if [ -z ${ONLYCUDABACKEND} ]; then ONLYCUDABACKEND=false; fi
if [ -z ${ONLYCPUBACKEND} ]; then ONLYCPUBACKEND=false; fi
if [ -z ${NOPLSDUPCLEAN} ]; then NOPLSDUPCLEAN=false; fi
if [ -z ${PRINTWARNINGS} ]; then PRINTWARNINGS=false; fi
if [ -z ${PTCUTVALUE} ]; then PTCUTVALUE=0.8; fi

# If using both -G and -C, -G takes priority
if [ "${ONLYCUDABACKEND}" == true ] && [ "${ONLYCPUBACKEND}" == true ]; then
  echo "WARNING: -C and -G flags should not be used together."
  echo "         Only the CUDA backend will be compiled"
  ONLYCPUBACKEND=false
fi

# Shift away the parsed options
shift $(($OPTIND - 1))

# Move to the TRACKLOOPERDIR
pushd ${TRACKLOOPERDIR}

# create log file
LOG=${TRACKLOOPERDIR}/.make.log.$(date +%s)

# Verbose
date | tee -a ${LOG}
echo "====================================================="  | tee -a ${LOG}
echo "Line Segment Tracking Compilation Script             "  | tee -a ${LOG}
echo "====================================================="  | tee -a ${LOG}
echo "Compilation options set to..."                          | tee -a ${LOG}
echo ""                                                       | tee -a ${LOG}
echo "  MAKECACHE         : ${MAKECACHE}"                     | tee -a ${LOG}
echo "  SHOWLOG           : ${SHOWLOG}"                       | tee -a ${LOG}
echo "  MAKECLEANBINARIES : ${MAKECLEANBINARIES}"             | tee -a ${LOG}
echo "  MAKECUTVALUES     : ${MAKECUTVALUES}"                 | tee -a ${LOG}
echo "  PRIMITIVE         : ${PRIMITIVE}"                     | tee -a ${LOG}
echo "  TCPLSTRIPLETS     : ${TCPLSTRIPLETS}"                 | tee -a ${LOG}
echo "  DONTUSENN         : ${DONTUSENN}"                     | tee -a ${LOG}
echo "  ONLYCUDABACKEND   : ${ONLYCUDABACKEND}"               | tee -a ${LOG}
echo "  ONLYCPUBACKEND    : ${ONLYCPUBACKEND}"                | tee -a ${LOG}
echo "  NOPLSDUPCLEAN     : ${NOPLSDUPCLEAN}"                 | tee -a ${LOG}
echo "  PRINTWARNINGS     : ${PRINTWARNINGS}"                 | tee -a ${LOG}
echo "  PTCUTVALUE        : ${PTCUTVALUE} GeV"                | tee -a ${LOG}
echo ""                                                       | tee -a ${LOG}
echo "  (cf. Run > sh $(basename $0) -h to see all options)"  | tee -a ${LOG}
echo ""                                                       | tee -a ${LOG}


TRACKLOOPERTARGET=
# If make explicit is true then make library with explicit memory on GPU
MAKETARGET=explicit;

# If make cache is true then make library with cache enabled
if $MAKECACHE; then MAKETARGET=${MAKETARGET}_cache; fi

# If make cache is true then make library with cache enabled

# If make clean binaries are called then first make clean before making
if $MAKECLEANBINARIES; then
    echo "First make cleaning all of TrackLooper objects and libsdl.so" | tee -a ${LOG}
    cd SDL;make clean >>${LOG} 2>&1;cd -;
    make clean >> ${LOG} 2>&1
fi
#if make cut value is called then cut value ntuple making is done
if $MAKECUTVALUES; then
    echo " Making cut value ntuple" | tee -a ${LOG}
    MAKETARGET=${MAKETARGET}_cutvalue;
    TRACKLOOPERTARGET=cutvalue 
    echo "debug : MAKETARGET=${MAKETARGET}"
fi
#if make cut value is called then cut value ntuple making is done
if $PRIMITIVE; then
    echo " Making cut value ntuple" | tee -a ${LOG}
    TRACKLOOPERTARGET=primitive 
    echo "debug : MAKETARGET=${MAKETARGET}"
fi

TCPLSTRIPLETSOPT=
if $TCPLSTRIPLETS; then
    TCPLSTRIPLETSOPT="TCPLSTRIPLETSFLAG=-DTC_PLS_TRIPLETS"
fi

T5CUTOPT=
if $DONTUSENN; then
    T5CUTOPT="T5RZCHI2FLAG=-DUSE_RZCHI2 T5RPHICHI2FLAG=-DUSE_RPHICHI2"
else
    T5CUTOPT="T5RZCHI2FLAG=-DUSE_RZCHI2 T5DNNFLAG=-DUSE_T5_DNN"
fi

BACKENDOPT="BACKEND=all"
if [ "$ONLYCUDABACKEND" == true ]; then
    BACKENDOPT="BACKEND=cuda"
elif [ "$ONLYCPUBACKEND" == true ]; then
    BACKENDOPT="BACKEND=cpu"
fi

NOPLSDUPCLEANOPT=
if $NOPLSDUPCLEAN; then
    NOPLSDUPCLEANOPT="NOPLSDUPCLEANFLAG=-DNOPLSDUPCLEAN"
fi

PRINTWARNINGSOPT=
if $PRINTWARNINGS; then
    PRINTWARNINGSOPT="LSTWARNINGSFLAG=-DWarnings"
fi

PTCUTOPT="PTCUTFLAG=-DPT_CUT=${PTCUTVALUE}"

###
###
### Making Line Segment Tracking Library
###
###

echo "Line Segment Tracking GPU library with MAKETARGET=${MAKETARGET} is being compiled...." | tee -a ${LOG}

echo "---------------------------------------------------------------------------------------------" >> ${LOG} 2>&1 
echo "---------------------------------------------------------------------------------------------" >> ${LOG} 2>&1 
echo "---------------------------------------------------------------------------------------------" >> ${LOG} 2>&1 
if $SHOWLOG; then
    (cd SDL && make clean && make ${TCPLSTRIPLETSOPT} ${T5CUTOPT} ${BACKENDOPT} ${PRINTWARNINGSOPT} ${NOPLSDUPCLEANOPT} ${PTCUTOPT} -j 32 ${MAKETARGET} && cd -) 2>&1 | tee -a ${LOG}
else
    (cd SDL && make clean && make ${TCPLSTRIPLETSOPT} ${T5CUTOPT} ${BACKENDOPT} ${PRINTWARNINGSOPT} ${NOPLSDUPCLEANOPT} ${PTCUTOPT} -j 32 ${MAKETARGET} && cd -) >> ${LOG} 2>&1
fi

if ([[ "$BACKENDOPT" == *"all"* ]] || [[ "$BACKENDOPT" == *"cpu"* ]]) && [ ! -f SDL/libsdl_cpu.so ]; then
  echo "ERROR: libsdl_cpu.so failed to compile!" | tee -a ${LOG}
  echo "See ${LOG} file for more detail..." | tee -a ${LOG}
  exit 1
elif ([[ "$BACKENDOPT" == *"all"* ]] || [[ "$BACKENDOPT" == *"cuda"* ]]) && [ ! -f SDL/libsdl_cuda.so ]; then
  echo "ERROR: libsdl_cuda.so failed to compile!" | tee -a ${LOG}
  echo "See ${LOG} file for more detail..." | tee -a ${LOG}
  echo $BACKENDOPT
  exit 1
fi

echo "" >> ${LOG}
echo "" >> ${LOG}
echo "" >> ${LOG}
echo "Line Segment Tracking GPU library compilation with MAKETARGET=${MAKETARGET} successful!" | tee -a ${LOG}
echo "" | tee -a ${LOG}

###
###
### Making Line Segment Tracking Binaries
###
###

echo "Line Segment Tracking binaries are being compiled...." | tee -a ${LOG}

echo "---------------------------------------------------------------------------------------------" >> ${LOG} 2>&1 
echo "---------------------------------------------------------------------------------------------" >> ${LOG} 2>&1 
echo "---------------------------------------------------------------------------------------------" >> ${LOG} 2>&1 
if $SHOWLOG; then
    make ${TRACKLOOPERTARGET} ${PTCUTOPT} -j 2>&1 | tee -a ${LOG}
else
    make ${TRACKLOOPERTARGET} ${PTCUTOPT} -j >> ${LOG} 2>&1
fi

if [ ! -f bin/sdl_cpu ] || [ ! -f bin/sdl_cuda ]; then
    echo "ERROR: bin/sdl_cpu or bin/sdl_cuda failed to compile!" | tee -a ${LOG}
    echo "See ${LOG} file for more detail..." | tee -a ${LOG}
    exit 1
fi

echo "" >> ${LOG}
echo "" >> ${LOG}
echo "" >> ${LOG}
echo "Line Segment Tracking binaries compilation successful!" | tee -a ${LOG}
echo "" | tee -a ${LOG}

echo "Compilation is logged at .make.log" | tee -a ${LOG}
echo "Compilation log is backed up at ${LOG}" | tee -a ${LOG}
cp ${LOG} .make.log

# Go back to where I was
popd
